{
	"info": {
		"_postman_id": "5e9d6502-9eaf-4526-97d7-008584583477",
		"name": "Public SOAP APIs",
		"description": "This is a collection of different SOAP APIs that are completley public and do not require any authentication, making it easier for consumers to play with and understand what APIs are all about by seeing the many different ways in which APIs can be used.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16899744"
	},
	"item": [
		{
			"name": "Book ISBN Numbers",
			"item": [
				{
					"name": "Is Valid ISBN13 Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const xml2js = require('xml2js');\r",
									"\r",
									"let parsedResponse;\r",
									"xml2js.parseString(pm.response.text(), { explicitArray: false }, function (err, result) {\r",
									"    if (err) {\r",
									"        throw new Error(\"Failed to parse XML response\");\r",
									"    }\r",
									"    parsedResponse = result;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"});\r",
									"pm.test(\"Content-Type is XML\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"text/xml; charset=utf-8\");\r",
									"});\r",
									"pm.test(\"Response contains soap:Envelope\", function () {\r",
									"    let responseBody = pm.response.text();\r",
									"    pm.expect(responseBody).to.include(\"<soap:Envelope\");\r",
									"});\r",
									"pm.test(\"Response contains soap:Body\", function () {\r",
									"    let responseBody = pm.response.text();\r",
									"    pm.expect(responseBody).to.include(\"<soap:Body\");\r",
									"});\r",
									"pm.test(\"IsValidISBN13Response contains IsValidISBN13Result\", function () {\r",
									"    let response = parsedResponse[\"soap:Envelope\"][\"soap:Body\"][\"m:IsValidISBN13Response\"];\r",
									"    pm.expect(response).to.have.property(\"m:IsValidISBN13Result\");\r",
									"});\r",
									"\r",
									"pm.test(\"ISBN13 validation result is true\", function () {\r",
									"    let result = parsedResponse[\"soap:Envelope\"][\"soap:Body\"][\"m:IsValidISBN13Response\"][\"m:IsValidISBN13Result\"];\r",
									"    pm.expect(result).to.equal(\"true\");\r",
									"});\r",
									"pm.test(\"IsValidISBN13Result is not empty\", function () {\r",
									"    let result = parsedResponse[\"soap:Envelope\"][\"soap:Body\"][\"m:IsValidISBN13Response\"][\"m:IsValidISBN13Result\"];\r",
									"    pm.expect(result).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"IsValidISBN13Result is a boolean string\", function () {\r",
									"    let result = parsedResponse[\"soap:Envelope\"][\"soap:Body\"][\"m:IsValidISBN13Response\"][\"m:IsValidISBN13Result\"];\r",
									"    pm.expect(result).to.be.oneOf([\"true\", \"false\"]);\r",
									"});\r",
									"pm.test(\"Response does not contain error messages\", function () {\r",
									"    let responseBody = pm.response.text();\r",
									"    pm.expect(responseBody).to.not.include(\"Fault\");\r",
									"    pm.expect(responseBody).to.not.include(\"Error\");\r",
									"});\r",
									"pm.test(\"Request ISBN is correct\", function () {\r",
									"    let requestBody = pm.request.body.raw;\r",
									"    pm.expect(requestBody).to.include(\"<sISBN>978-1-4612-9090-2</sISBN>\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <IsValidISBN13 xmlns=\"http://webservices.daehosting.com/ISBN\">\n      <sISBN>978-1-4612-9090-2</sISBN>\n    </IsValidISBN13>\n  </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "http://webservices.daehosting.com/services/isbnservice.wso",
							"protocol": "http",
							"host": [
								"webservices",
								"daehosting",
								"com"
							],
							"path": [
								"services",
								"isbnservice.wso"
							]
						},
						"description": "The test is done by calculation on the first 12 digits and compare the result with the checksum number at the end. You have to pass a 13 digits number."
					},
					"response": []
				},
				{
					"name": "Is Valid ISBN10 Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const xml2js = require('xml2js');\r",
									"let parsedResponse;\r",
									"xml2js.parseString(pm.response.text(), { explicitArray: false }, function (err, result) {\r",
									"    if (err) {\r",
									"        throw new Error(\"Failed to parse XML response\");\r",
									"    }\r",
									"    parsedResponse = result;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response contains soap:Envelope\", function () {\r",
									"    let responseBody = pm.response.text();\r",
									"    pm.expect(responseBody).to.include(\"<soap:Envelope\");\r",
									"});\r",
									"pm.test(\"Response contains soap:Body\", function () {\r",
									"    let responseBody = pm.response.text();\r",
									"    pm.expect(responseBody).to.include(\"<soap:Body\");\r",
									"});\r",
									"pm.test(\"IsValidISBN10Response contains IsValidISBN10Result\", function () {\r",
									"    let response = parsedResponse[\"soap:Envelope\"][\"soap:Body\"][\"m:IsValidISBN10Response\"];\r",
									"    pm.expect(response).to.have.property(\"m:IsValidISBN10Result\");\r",
									"});\r",
									"pm.test(\"ISBN10 validation result is true\", function () {\r",
									"    let result = parsedResponse[\"soap:Envelope\"][\"soap:Body\"][\"m:IsValidISBN10Response\"][\"m:IsValidISBN10Result\"];\r",
									"    pm.expect(result).to.equal(\"true\");\r",
									"});\r",
									"pm.test(\"Content-Type is XML\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"text/xml; charset=utf-8\");\r",
									"});\r",
									"pm.test(\"IsValidISBN10Result is not empty\", function () {\r",
									"    let result = parsedResponse[\"soap:Envelope\"][\"soap:Body\"][\"m:IsValidISBN10Response\"][\"m:IsValidISBN10Result\"];\r",
									"    pm.expect(result).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"Response does not contain error messages\", function () {\r",
									"    let responseBody = pm.response.text();\r",
									"    pm.expect(responseBody).to.not.include(\"Fault\");\r",
									"    pm.expect(responseBody).to.not.include(\"Error\");\r",
									"});\r",
									"pm.test(\"Request ISBN is correct\", function () {\r",
									"    let requestBody = pm.request.body.raw;\r",
									"    pm.expect(requestBody).to.include(\"<sISBN>0-19-852663-6</sISBN>\");\r",
									"});\r",
									"pm.test(\"IsValidISBN10Result is a boolean string\", function () {\r",
									"    let result = parsedResponse[\"soap:Envelope\"][\"soap:Body\"][\"m:IsValidISBN10Response\"][\"m:IsValidISBN10Result\"];\r",
									"    pm.expect(result).to.be.oneOf([\"true\", \"false\"]);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <IsValidISBN10 xmlns=\"http://webservices.daehosting.com/ISBN\">\n      <sISBN>0-19-852663-6</sISBN>\n    </IsValidISBN10>\n  </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "http://webservices.daehosting.com/services/isbnservice.wso",
							"protocol": "http",
							"host": [
								"webservices",
								"daehosting",
								"com"
							],
							"path": [
								"services",
								"isbnservice.wso"
							]
						},
						"description": "The test is done by calculation on the first 9 digits and compare the result with the checksum number at the end. You have to pass a 10 digits number or 8 digits and an X."
					},
					"response": []
				}
			],
			"description": "SOAP APIs for book ISBN numbers.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}